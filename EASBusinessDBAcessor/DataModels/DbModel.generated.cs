//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : BusinessModel
	/// Data Source    : .
	/// Server Version : 11.00.5058
	/// </summary>
	public partial class BusinessModelDB : LinqToDB.Data.DataConnection
	{
		public ITable<LaBusinessService>            LaBusinessServices            { get { return this.GetTable<LaBusinessService>(); } }
		public ITable<LaBusinessServicePrintReport> LaBusinessServicePrintReports { get { return this.GetTable<LaBusinessServicePrintReport>(); } }

		public BusinessModelDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public BusinessModelDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(BusinessModelDB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(BusinessModelDB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="LA_BusinessService")]
	public partial class LaBusinessService
	{
		[PrimaryKey(1), NotNull    ] public string    TerminalId             { get; set; } // nvarchar(10)
		[PrimaryKey(2), NotNull    ] public string    DataAreaId             { get; set; } // nvarchar(4)
		[PrimaryKey(3), NotNull    ] public string    StoreId                { get; set; } // nvarchar(10)
		[PrimaryKey(4), NotNull    ] public Guid      OperationId            { get; set; } // uniqueidentifier
		[Column,        NotNull    ] public string    StaffId                { get; set; } // nvarchar(25)
		[Column,        NotNull    ] public string    OperationType          { get; set; } // nvarchar(100)
		[Column,           Nullable] public string    EntityId               { get; set; } // nvarchar(20)
		[Column,           Nullable] public string    ElementId              { get; set; } // nvarchar(1000)
		[Column,           Nullable] public DateTime? BeginDateTime          { get; set; } // datetime
		[Column,           Nullable] public DateTime? EndDateTime            { get; set; } // datetime
		[Column,           Nullable] public string    TransactionId          { get; set; } // nvarchar(44)
		[Column,           Nullable] public Guid?     TransactionLinesId     { get; set; } // uniqueidentifier
		[Column,           Nullable] public Guid?     CompliteTransactionId  { get; set; } // uniqueidentifier
		[Column,           Nullable] public Guid?     PaydTransactionLinesId { get; set; } // uniqueidentifier
		[Column,           Nullable] public DateTime? LastUpdateTime         { get; set; } // datetime
		[Column,           Nullable] public string    Barcode                { get; set; } // nvarchar(255)
		[Column,        NotNull    ] public int       FiscalPrint            { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_EASBusinessService_EASBusinessService
		/// </summary>
		[Association(ThisKey="TerminalId, DataAreaId, StoreId, OperationId", OtherKey="TerminalId, DataAreaId, StoreId, OperationId", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_EASBusinessService_EASBusinessService", BackReferenceName="FkEASBusinessServiceEASBusinessServiceBackReference")]
		public LaBusinessService EASBusinessServiceEASBusinessService { get; set; }

		/// <summary>
		/// FK_EASBusinessServicePrintReports_EASBusinessService_BackReference
		/// </summary>
		[Association(ThisKey="TerminalId, DataAreaId, StoreId, OperationId", OtherKey="TerminalId, DataAreaId, StoreId, OperationId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LaBusinessServicePrintReport> EASBusinessServicePrintReportsEASBusinessServices { get; set; }

		/// <summary>
		/// FK_EASBusinessService_EASBusinessService_BackReference
		/// </summary>
		[Association(ThisKey="TerminalId, DataAreaId, StoreId, OperationId", OtherKey="TerminalId, DataAreaId, StoreId, OperationId", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public LaBusinessService FkEASBusinessServiceEASBusinessServiceBackReference { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="LA_BusinessServicePrintReports")]
	public partial class LaBusinessServicePrintReport
	{
		[PrimaryKey(1), NotNull] public Guid   PrintReportsId    { get; set; } // uniqueidentifier
		[PrimaryKey(2), NotNull] public Guid   OperationId       { get; set; } // uniqueidentifier
		[PrimaryKey(3), NotNull] public string DataAreaId        { get; set; } // nvarchar(4)
		[PrimaryKey(4), NotNull] public string TerminalId        { get; set; } // nvarchar(10)
		[PrimaryKey(5), NotNull] public string StoreId           { get; set; } // nvarchar(10)
		[Column,        NotNull] public string ClassId           { get; set; } // nvarchar(255)
		[Column,        NotNull] public string EntityId          { get; set; } // nvarchar(10)
		[Column,        NotNull] public string Description       { get; set; } // nvarchar(255)
		[Column,        NotNull] public int    PageCount         { get; set; } // int
		[Column,        NotNull] public int    NumberOfCopies    { get; set; } // int
		[Column,        NotNull] public int    TotalPrintedPages { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_EASBusinessServicePrintReports_EASBusinessService
		/// </summary>
		[Association(ThisKey="TerminalId, DataAreaId, StoreId, OperationId", OtherKey="TerminalId, DataAreaId, StoreId, OperationId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_EASBusinessServicePrintReports_EASBusinessService", BackReferenceName="EASBusinessServicePrintReportsEASBusinessServices")]
		public LaBusinessService EASBusinessServicePrintReportsEASBusinessService { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static LaBusinessService Find(this ITable<LaBusinessService> table, string TerminalId, string DataAreaId, string StoreId, Guid OperationId)
		{
			return table.FirstOrDefault(t =>
				t.TerminalId  == TerminalId &&
				t.DataAreaId  == DataAreaId &&
				t.StoreId     == StoreId    &&
				t.OperationId == OperationId);
		}

		public static LaBusinessServicePrintReport Find(this ITable<LaBusinessServicePrintReport> table, Guid PrintReportsId, Guid OperationId, string DataAreaId, string TerminalId, string StoreId)
		{
			return table.FirstOrDefault(t =>
				t.PrintReportsId == PrintReportsId &&
				t.OperationId    == OperationId    &&
				t.DataAreaId     == DataAreaId     &&
				t.TerminalId     == TerminalId     &&
				t.StoreId        == StoreId);
		}
	}
}

#pragma warning restore 1591
